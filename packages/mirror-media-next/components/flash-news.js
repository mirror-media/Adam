//TODO : this component would rerender twice (once at `handleClickPrev` or `handleClickNext`, once at `handleTransitionEnd`),
//need to refactor to solve this performance issue.
import React, { useState, useEffect, useCallback, useMemo } from 'react'

import styled from 'styled-components'

const FlashNewsWrapper = styled.div`
  display: flex;
  align-items: center;
  width: 100%;
  margin: 0 auto;
  overflow: hidden;
  height: 21px;
  font-size: 12px;
  background: #f4f4f4;
  font-weight: 600;
  color: #054f77;
  ${({ theme }) => theme.breakpoint.xl} {
    height: 36px;
    font-size: 16px;
  }
`

const Title = styled.div`
  width: 40px;
  text-align: center;
  background-color: #054f77;
  color: white;
  position: relative;
  margin-right: 6px;
  ${({ theme }) => theme.breakpoint.xl} {
    background-color: transparent;
    color: #054f77;
    margin-right: 12px;
    &::after {
      position: absolute;
      content: '|';
      right: -6px;
      color: #054f77;
    }
  }
`
const ArrowWrapper = styled.div`
  width: 3px;
  margin: 0 8px 0 7px;
  user-select: none;
  order: 1;
  display: flex;
  gap: 4px;
  ${({ theme }) => theme.breakpoint.xl} {
    width: 12px;

    order: 0;
    display: block;
  }
`
const Arrow = styled.span`
  width: 12px;
  height: 12px;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
  cursor: pointer;

  &::before {
    content: '';
    display: block;
    width: 0;
    height: 0;
    border-style: solid;
  }
  &.prev::before {
    border-width: 0 5.2px 9px 5.2px;
    border-color: transparent transparent #054f77 transparent;
  }
  &.next::before {
    border-width: 9px 5.2px 0 5.2px;
    border-color: #054f77 transparent transparent transparent;
  }
`

const FlashNewsList = styled.div`
  height: 100%;
  width: calc(100% - 45px);
  ${
    /**
     *  @param {Object} props
     *  @param {boolean} props.shouldTransition
     *  @param {number} props.move
     */
    ({ shouldTransition }) =>
      shouldTransition ? 'transition: transform 0.35s ease;' : null
  }
  ${({ move }) => move && `transform: translateY(${move * 100}%)`}
`

const FlashNew = styled.a`
  display: flex;
  padding: 2px 0 2px;
  .content {
    width: 100%;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
  }
  ${({ theme }) => theme.breakpoint.xl} {
    padding: 6px 0 6px;
  }
`

/**
 * @typedef {import('../type').FlashNews} FlashNews
 */

/**
 *
 * @param {Object} props
 * @param {FlashNews[]} props.flashNews
 * @returns {React.ReactElement}
 */
export default function FlashNews({ flashNews = [] }) {
  //state `move` has three purpose：
  //1. control and the transition distance of component `FlashNewsList`, making the animation of sliding.
  //2. When slide to previous or next news, `move` will plus or minus 1.
  //3. When sliding animation end, we reset `move` to `-1` and change value of `pageForSlide` (plus or minus 1).
  const [move, setMove] = useState(-1)
  //`pageForSlide` is the argument for computing array `displayedArticle`, when `pageForSlide` change, `displayedArticle` change.
  const [pageForSlide, setPageForSlide] = useState(0)
  const [shouldTransition, setShouldTransition] = useState(false)
  //displayedArticle is an array generated by getDisplayedArticle(),
  //getDisplayedArticle accept two arguments: `pageForSlide` and `flashNews`,and return a array base on different `flashNews.length` and `pagForSlide`.
  //For example, if flashNews is [A,B,C,D,E]，when pageForSlide is 0, displayedArticle is [E,A,B]; when pageForSlide is 1, displayedArticle is [A,B,C];
  //if pageForSlide is -1, displayedArticle will become [D,E,A]。

  /**
   *
   * @param {number} pageForSlide
   * @param {FlashNews[]} flashNews
   * @returns {FlashNews[]}
   */
  const getDisplayedArticle = (pageForSlide, flashNews) => {
    const len = flashNews.length
    const curIdxPositive = (pageForSlide % len) + len
    return [
      flashNews[(curIdxPositive - 1) % len],
      flashNews[curIdxPositive % len],
      flashNews[(curIdxPositive + 1) % len],
    ]
  }
  const displayedArticle = useMemo(
    () => getDisplayedArticle(pageForSlide, flashNews),
    [pageForSlide, flashNews]
  )

  const handleClickPrev = () => {
    if (shouldTransition) {
      return
    }
    setShouldTransition(true)
    setMove((prevState) => prevState + 1)
  }
  const handleClickNext = useCallback(() => {
    if (shouldTransition) {
      return
    }
    setShouldTransition(true)
    setMove((prevState) => prevState - 1)
  }, [shouldTransition])
  const handleTransitionEnd = () => {
    setShouldTransition(false)
    if (move === -2) {
      setMove(-1)
      setPageForSlide((prevState) => prevState + 1)
    } else if (move === 0) {
      setMove(-1)
      setPageForSlide((prevState) => prevState - 1)
    }
  }

  useEffect(() => {
    const timer = setTimeout(() => {
      handleClickNext()
    }, 2000)
    return () => clearTimeout(timer)
  }, [handleClickNext])
  return (
    <FlashNewsWrapper>
      <ArrowWrapper className="arrows">
        <Arrow className="prev" onClick={handleClickPrev} />
        <Arrow className="next" onClick={handleClickNext} />
      </ArrowWrapper>
      {/* eslint-disable-next-line @next/next/no-html-link-for-pages */}
      <FlashNewsList
        shouldTransition={shouldTransition}
        move={move}
        onTransitionEnd={handleTransitionEnd}
      >
        {displayedArticle.map((item) => (
          <FlashNew
            href={item?.href}
            key={item?.slug}
            target="_blank"
            rel="noreferrer noopenner"
          >
            <Title>快訊</Title>
            <p className="content"> {item?.title}</p>
          </FlashNew>
        ))}
      </FlashNewsList>
    </FlashNewsWrapper>
  )
}
